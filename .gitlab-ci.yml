# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - lint
  - build
  - on-demand
  - test
  - integration
  - publish
  - staging
  - pages
  - scan
  - lifecycle

include:
# Python packages build,lint, test and publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'

# # Helm Chart linting and Publish
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

# # Docs pages
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

# k8s steps
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

# integration job
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/deploy.integration.gitlab-ci.yml'

# staging job
- project: "ska-telescope/templates-repository"
  file: "gitlab-ci/includes/deploy.staging.gitlab-ci.yml"

# Create Gitlab CI badges from CI metrics
# https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
- project: 'ska-telescope/templates-repository'
  file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

# # Publish bdd test results on Jira.
# - project: 'ska-telescope/templates-repository'
#   file: 'gitlab-ci/includes/xray-publish.gitlab-ci.yml'


xray-publish:
  stage: publish
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  tags:
    - k8srunner
  before_script:
    - '[ -f .make/xray.mk ] || (echo "File xray.mk not included in Makefile; exit 1")'
    - "make help | grep xray-publish"
  script:
    - ls -al
    - ls -al build
    - ls -al tests
    - pip3 install -U ska-ser-xray
    - XRAY_TEST_RESULT_FILE="build/cucumber.json" make xray-publish
  rules:
    - exists:
        - tests/xray-config.json # needs to be configurable as per XRAY_EXECUTION_CONFIG in make
  dependencies:
    - k8s-test
  allow_failure: true

on-demand-deploy:
  stage: on-demand
  tags:
    - k8srunner
  variables:
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
    KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-on-demand"
    TARANTA_ENABLED: "true"
  script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - make k8s-install-chart
    - make k8s-wait
    - make taranta-link
    - make alarm-handler-configurator-link
  environment:
    name: $CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
    kubernetes:
      # This repetition is needed for gitlab to parse the namespace correctly
      namespace: $KUBE_NAMESPACE
    on_stop: on-demand-destroy
  when: manual
  allow_failure: true # need to keep this to unlock the pipeline

on-demand-destroy:
  stage: on-demand
  tags:
    - k8srunner
  variables:
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
    KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-on-demand"
  script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - make k8s-uninstall-chart
  environment:
    name: $CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
    kubernetes:
      # This repetition is needed for gitlab to parse the namespace correctly
      namespace: $KUBE_NAMESPACE
    action: stop
  when: manual
  allow_failure: true # need to keep this to unlock the pipeline

k8s-test:
  retry: 1
  extends:
    - k8s-test
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
  script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - make k8s-install-chart
    - make k8s-wait
    - make k8s-test
  environment:
    name: test/$CI_COMMIT_REF_SLUG
    on_stop: stop-k8s-test
    auto_stop_in: 1 minute

stop-k8s-test:
  extends:
    - stop-k8s-test
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace

deploy-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

redeploy-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

info-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

stop-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

deploy-integration:
  extends:
    - deploy-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  environment:
    name: integration-$CI_PROJECT_NAME
    on_stop: stop-integration
  script:
    - make k8s-install-chart
    - make k8s-wait
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'


redeploy-integration:
  extends:
    - redeploy-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  environment:
    name: integration-$CI_PROJECT_NAME
  script:
    - make k8s-uninstall-chart
    - make k8s-delete-namespace
    - make k8s-install-chart
    - make k8s-wait
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

info-integration:
  extends:
    - info-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  environment:
    name: integration-$CI_PROJECT_NAME
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

stop-integration:
  extends:
    - stop-integration
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  environment:
    name: integration-$CI_PROJECT_NAME
    action: stop
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

#staging
deploy-staging:
  stage: staging
  when: manual
  rules:
    - if: $CI_COMMIT_TAG

redeploy-staging:
  stage: staging
  when: manual
  rules:
    - if: $CI_COMMIT_TAG


info-staging:
  stage: staging
  when: manual
  rules:
    - if: $CI_COMMIT_TAG

stop-staging:
  stage: staging
  when: manual
  rules:
    - if: $CI_COMMIT_TAG


deploy-staging:
  stage: staging
  needs:
    - deploy-integration
  when: manual
  extends:
    - deploy-staging
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  environment:
    name: staging-$CI_PROJECT_NAME
    on_stop: stop-staging
  script:
    - make k8s-install-chart-car
    - make k8s-wait
  rules:
    - if: $CI_COMMIT_TAG

redeploy-staging:
  stage: staging
  when: manual
  extends:
    - redeploy-staging
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  environment:
    name: staging-$CI_PROJECT_NAME
  script:
    - make k8s-uninstall-chart
    - make k8s-delete-namespace
    - make k8s-install-chart
  rules:
    - if: $CI_COMMIT_TAG

info-staging:
  stage: staging
  when: manual
  extends:
    - info-staging
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  environment:
    name: staging-$CI_PROJECT_NAME
  rules:
    - if: $CI_COMMIT_TAG

stop-staging:
  stage: staging
  when: manual
  extends:
    - stop-staging
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  environment:
    name: staging-$CI_PROJECT_NAME
    action: stop
  rules:
    - if: $CI_COMMIT_TAG