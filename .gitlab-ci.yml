image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive


cache:
  paths:
    - build

stages:
  - lint
  - build
  - on-demand
  - test
  - integration
  - publish
  - staging
  - pages
  - scan
  - lifecycle

include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python-lint.gitlab-ci.yml'

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs-pages.gitlab-ci.yml'

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/deploy.integration.gitlab-ci.yml'

  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/deploy.staging.gitlab-ci.yml"

  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'


on-demand-deploy:
  stage: on-demand
  tags:
    - ska-k8s
  variables:
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
    KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-on-demand"
    TARANTA_ENABLED: "true"
  script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - make k8s-install-chart
    - make k8s-wait
    - make taranta-link
    - make alarm-handler-configurator-link
  environment:
    name: $CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $KUBE_NAMESPACE
    on_stop: on-demand-destroy
  when: manual
  allow_failure: true


on-demand-destroy:
  stage: on-demand
  tags:
    - ska-k8s
  variables:
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
    KUBE_NAMESPACE: "ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-on-demand"
  script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - make k8s-uninstall-chart
  environment:
    name: $CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
    kubernetes:
      namespace: $KUBE_NAMESPACE
    action: stop
  when: manual
  allow_failure: true

k8s-test:
  rules:
    - when: never

# k8s-test-tmc-with-csp:
#   extends:
#     - k8s-test
#   variables:
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-csp-low'
#     SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-csp-low"
#     MARK: 'tmc_csp'
#     COUNT: 1
#     CSP_SIMULATION_ENABLED: 'false'
#   environment:
#     name: test/$CI_COMMIT_REF_SLUG
#     on_stop: stop-k8s-test-tmc-with-csp
#   when: manual

# stop-k8s-test-tmc-with-csp:
#   extends:
#     - stop-k8s-test
#   variables:
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-csp-low'

# k8s-test-tmc-with-sdp:
#   extends:
#     - k8s-test
#   tags:
#     - ska-k8s
#   variables:
#     TELESCOPE: 'SKA-low'
#     PORT: "10000"
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-tmc-sdp'
#     KUBE_NAMESPACE_SDP: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-sdp'
#     SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-tmc-sdp"
#     SDP_SIMULATION_ENABLED: 'false'
#   script:
#     - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
#     - make cred KUBE_NAMESPACE=$KUBE_NAMESPACE_SDP
#     - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
#     - 'make help | grep k8s-test'
#     - make k8s-install-chart SDP_PROCCONTROL_REPLICAS=0
#     - make k8s-wait 
#     - make k8s-wait KUBE_APP="ska-sdp"
#     - make k8s-test MARK='tmc_sdp_unhappy_path'
#     - make k8s-uninstall-chart
#     - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
#     - make k8s-delete-namespace
#     - make k8s-install-chart SDP_PROCCONTROL_REPLICAS=1
#     - make k8s-wait
#     - make k8s-wait KUBE_APP="ska-sdp"
#     - make k8s-test MARK='tmc_sdp'
#   after_script:
#     - pip3 install -q -U ska-ser-xray
#     - XRAY_TEST_RESULT_FILE="build/cucumber.json" make xray-publish
#   environment:
#     name: test/$CI_COMMIT_REF_SLUG
#     on_stop: stop-k8s-test-tmc-with-sdp
#   when: manual
    
# stop-k8s-test-tmc-with-sdp:
#   extends:
#     - stop-k8s-test
#   variables:
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-tmc-sdp'
#     SDP_SIMULATION_ENABLED: 'false'
    
# k8s-test-tmc-with-mccs:
#   extends:
#     - k8s-test
#   variables:
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-mccs-low'
#     SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-mccs-low"
#     MARK: 'tmc_mccs'
#     MCCS_SIMULATION_ENABLED: 'false'
#   before_script:
#     - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
#     - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
#     - 'make help | grep k8s-test'
#     - make k8s-install-chart
#     - make k8s-wait
#   environment:
#     name: test/$CI_COMMIT_REF_SLUG
#     on_stop: stop-k8s-test-tmc-with-mccs
#   when: manual

# stop-k8s-test-tmc-with-mccs:
#   extends:
#     - stop-k8s-test
#   variables:
#     KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA-mccs-low'

deploy-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    SERVICE_ACCOUNT: "ci-svc-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA"
    MARK: 'tmc_csp_delay'
  before_script:
    - make cred SERVICE_ACCOUNT=$SERVICE_ACCOUNT
    - '[ -f .make/k8s.mk ] || (echo "File k8s.mk not included in Makefile; exit 1")'
    - 'make help | grep k8s-test'
    - make k8s-install-chart
    - make k8s-wait
    - make k8s-test MARK='tmc_csp_delay'


redeploy-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

info-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

stop-integration:
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'

#staging
deploy-staging:
  stage: staging
  when: manual
  rules:
    - if: $CI_COMMIT_TAG

redeploy-staging:
  stage: staging
  when: manual
  rules:
    - if: $CI_COMMIT_TAG

info-staging:
  stage: staging
  when: manual
  rules:
    - if: $CI_COMMIT_TAG

stop-staging:
  stage: staging
  when: manual
  rules:
    - if: $CI_COMMIT_TAG